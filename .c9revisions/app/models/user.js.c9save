{"ts":1354282245409,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1354282323836,"patch":[[{"diffs":[[1,"// user schema\n\nvar mongoose = require('mongoose')\n  , Schema = mongoose.Schema\n  , crypto = require('crypto')\n  , _ = require('underscore')\n  \nvar UserSchema = new Schema({\n    name: String\n  , email: String\n  , username: String\n  , provider: String\n  , hashed_password: String\n  , salt: String\n})\n\n// virtual attributes\nUserSchema\n  .virtual('password')\n  .set(function(password) {\n    this._password = password\n    this.salt = this.makeSalt()\n    this.hashed_password = this.encryptPassword(password)\n  })\n  .get(function() { return this._password })\n\n// validations\nvar validatePresenceOf = function (value) {\n  return value && value.length\n}\n\n// the below 4 validations only apply if you are signing up traditionally\n\nUserSchema.path('name').validate(function (name) {\n  // if you are authenticating by any of the oauth strategies, don't validate\n  if (authTypes.indexOf(this.provider) !== -1) return true\n  return name.length\n}, 'Name cannot be blank')\n\nUserSchema.path('email').validate(function (email) {\n  // if you are authenticating by any of the oauth strategies, don't validate\n  if (authTypes.indexOf(this.provider) !== -1) return true\n  return email.length\n}, 'Email cannot be blank')\n\nUserSchema.path('username').validate(function (username) {\n  // if you are authenticating by any of the oauth strategies, don't validate\n  if (authTypes.indexOf(this.provider) !== -1) return true\n  return username.length\n}, 'Username cannot be blank')\n\n\n// pre save hooks\nUserSchema.pre('save', function(next) {\n  if (!this.isNew) return next()\n\n  if (!validatePresenceOf(this.password) && authTypes.indexOf(this.provider) === -1)\n    next(new Error('Invalid password'))\n  else\n    next()\n})\n\n// methods\nUserSchema.method('authenticate', function(plainText) {\n  return this.encryptPassword(plainText) === this.hashed_password\n})\n\nUserSchema.method('makeSalt', function() {\n  return Math.round((new Date().valueOf() * Math.random())) + ''\n})\n\nUserSchema.method('encryptPassword', function(password) {\n  return crypto.createHmac('sha1', this.salt).update(password).digest('hex')\n})\n\nmongoose.model('User', UserSchema)\n"]],"start1":0,"start2":0,"length1":0,"length2":2117}]],"length":2117,"saved":false}
{"ts":1354282399145,"patch":[[{"diffs":[[0,"e) {"],[-1,"\n  // if you are authenticating by any of the oauth strategies, don't validate\n  if (authTypes.indexOf(this.provider) !== -1) return true"],[1," "],[0,"\n  r"]],"start1":769,"start2":769,"length1":145,"length2":9}]],"length":1981,"saved":false}
{"ts":1354282409501,"patch":[[{"diffs":[[0,") {\n"],[-1,"  // if you are authenticating by any of the oauth strategies, don't validate\n  if (authTypes.indexOf(this.provider) !== -1) return true\n"],[0,"  re"]],"start1":873,"start2":873,"length1":145,"length2":8}]],"length":1844,"saved":false}
{"ts":1354282432743,"patch":[[{"diffs":[[0,"e) {"],[-1,"\n  // if you are authenticating by any of the oauth strategies, don't validate\n  if (authTypes.indexOf(this.provider) !== -1) return true"],[1," "],[0,"\n  r"]],"start1":982,"start2":982,"length1":145,"length2":9}]],"length":1708,"saved":false}
{"ts":1354282496328,"patch":[[{"diffs":[[0,"ord)"],[-1," && authTypes.indexOf(this.provider) === -1"],[0,")\n  "]],"start1":1174,"start2":1174,"length1":51,"length2":8}]],"length":1665,"saved":false}
