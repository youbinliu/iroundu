{"ts":1355301945010,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"ts":1355303334681,"patch":[[{"diffs":[[0,"ema\r"],[-1,"\n  , crypto = require('crypto')\r\n  , _ = require('underscore')\r\n  \r\nvar UserSchema = new Schema({\r\n    email: String\r\n  , username: String\r\n  , provider: String\r\n  , hashed_password: String\r\n  , salt: String\r\n  , avatar:String\r\n  , gender:String\r\n  ,createdTime:{type: Date, default: Date.now}\r\n})\r\n\r\n// virtual attributes\r\nUserSchema\r\n  .virtual('password')\r\n  .set(function(password) {\r\n    this._password = password\r\n    this.salt = this.makeSalt()\r\n    this.hashed_password = this.encryptPassword(password)\r\n  })\r\n  .get(function() { return this._password })\r\n\r\n// validations\r\nvar validatePresenceOf = function (value) {\r\n  return value && value.length\r\n}\r\n\r\n// methods\r\nUserSchema.method('authenticate', function(plainText) {\r\n  return this.encryptPassword(plainText) === this.hashed_password\r\n})\r\n\r\nUserSchema.method('makeSalt', function() {\r\n  return Math.round((new Date().valueOf() * Math.random())) + ''\r\n})\r\n\r\nUserSchema.method('encryptPassword', function(password) {\r\n  return crypto.createHmac('sha1', this.salt).update(password).digest('hex')\r\n})\r\n\r\n//UserSchema.method('updateAvatar',function())\r"],[0,"\n\r\nm"]],"start1":80,"start2":80,"length1":1120,"length2":8}]],"length":123,"saved":false}
{"contributors":[],"silentsave":false,"ts":1355304746666,"patch":[[{"diffs":[[1,"// voice schema\r\n\r\nvar mongoose = require('mongoose')\r\n  , Schema = mongoose.Schema\r\n"]],"start1":0,"start2":0,"length1":0,"length2":85}]],"length":85,"saved":false}
